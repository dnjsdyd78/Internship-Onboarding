name: CICD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 최근 커밋된 코드 저장소 불러오기
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon

      - name: Copy Profiles to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ./src/main/resources/application.properties
          target: /home/ec2-user/auth

      # 도커 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드 및 푸쉬(배치 모듈 도커 이미지 빌드)
      - name: Build and push Docker image
        run: |
          docker build -f Dockerfile -t app:latest .
          docker tag app:latest ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Docker image pull & Deploy to EC2
        uses: appleboy/ssh-action@master

        # EC2 접속
        with:
          host: ${{ secrets.EC2_HOST }} # PUBLIC IP
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }} # SSH 비공개 키값
          # Docker pull & run
          script: |
            # EC2 내에서 Docker 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # 태그 없는 도커이미지 삭제
            docker rmi $(docker images -f "dangling=true" -q)
            
            # 정지된 컨테이너 삭제
            docker container prune 
            
            # 기존 도거 정지 및 삭제
            docker stop app || true
            docker rm app || true
            
            # Docker 이미지 풀 및 실행
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
            
            docker run -d --name app -p 8080:8080 \
            -e DB_ENDPOINT=${{ secrets.DB_ENDPOINT }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e JWT_KEY=${{ secrets.JWT_KEY }} \
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
